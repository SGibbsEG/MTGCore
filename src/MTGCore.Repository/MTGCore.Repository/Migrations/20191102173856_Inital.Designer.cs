// <auto-generated />
using System;
using MTGCore.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTGCore.Repository.Migrations
{
    [DbContext(typeof(RepoContext))]
    [Migration("20191102173856_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTGCore.Dtos.Cards", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cmc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manaCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("multiverseid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("toughness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MTGCore.Dtos.Models.DeckCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DeckID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardID");

                    b.HasIndex("DeckID");

                    b.ToTable("DeckCards");
                });

            modelBuilder.Entity("MTGCore.Dtos.Models.Decks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("MTGCore.Dtos.Models.DeckCards", b =>
                {
                    b.HasOne("MTGCore.Dtos.Cards", "Card")
                        .WithMany()
                        .HasForeignKey("CardID");

                    b.HasOne("MTGCore.Dtos.Models.Decks", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
